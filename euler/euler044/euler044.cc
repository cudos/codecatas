// Copyright 2014, Jens Hoffmann
//
// Euler probem 44 - Pentagon numbers
//
// Pentagonal numbers are generated by the formula,
// Pn=n(3n−1)/2. The first ten pentagonal numbers are:
//
// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
//
// It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However,
// their difference, 70 − 22 = 48, is not pentagonal.
//
// Find the pair of pentagonal numbers, Pj and Pk, for which
// their sum and difference are pentagonal and D = |Pk − Pj|
// is minimised; what is the value of D?
//
#include <stdio.h>
#include <cmath>

bool isPentagonal(int x) {
  double s = (sqrt(1.0 + 24.0*x) + 1.0) / 6.0;
  return s == int(s);
}

int main() {
  int result = 0;;
  int n = 1;
  bool notFound = true;
  while (notFound) {
    int pn = (3*n*n - n) / 2;
    for (int i = n - 1; i > 0; --i) {
      int pi = (3*i*i - i) / 2;
      if (isPentagonal(pn - pi) && isPentagonal(pn + pi)) {
        printf("n: %d, i: %d\n", n, i);
        result = pn - pi;
        notFound = false;
        break;
      }
    }
    n += 1;
  }
  printf("%d\n", result);
  return 0;
}
